import org.jooq.meta.jaxb.Logging

def checkProperty(Project project, String propName) {
    if (!project.hasProperty(propName)) return false
    String prop = project.property(propName)
    return prop != null && prop.length() > 0
}

def getPropertyOrElse(Project project, String propName, String alternative) {
    if (!checkProperty(project, propName)) return alternative
    return project.property(propName)
}

def isApplicationProject(String projectName) {
    return projectName.startsWith('demo') \
        && !projectName.endsWith('-api') \
        && !projectName.endsWith('-model') \
        && !projectName.endsWith('-model-3') \
        && !projectName.endsWith('-shared') \
        && !projectName.endsWith('-security') \
        && !projectName.endsWith('-test-support')
}

def hasDataBaseProject(String projectName) {
    return projectName.equals('demo-app') \
        || projectName.endsWith('demo-plugin-author') \
        || projectName.endsWith('demo-plugin-shelf')
}

def isLibraryProject(String projectName) {
    return projectName.startsWith('sbp-')
}

def isPluginProject(Project project) {
    return project.hasProperty("plugin")
}

def generateVersion(Project project, String sbpVersion) {
    def sVer = VersionNumber.parse(getPropertyOrElse(project, 'springBootVersion', '0.0.0'))
    return sVer.getMajor() + '.' + sVer.getMinor() + '.' + sbpVersion
}

def getVersion(Project project) {
    def version = getPropertyOrElse(project, 'version', '')
    if (version != '' && version != 'unspecified') return version
    return generateVersion(project, getPropertyOrElse(project, 'sbpVersion', '0'))
}

buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath "org.yaml:snakeyaml:1.19"
//        classpath 'ch.raffael.markdown-doclet:markdown-doclet:1.4' // TODO this plugin is not worked since JDK 11
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

plugins {
    id 'idea'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
    id 'nu.studer.jooq' version '8.1' apply false
    id 'org.flywaydb.flyway' version "8.4.0" apply false
    id("com.gradleup.nmcp.aggregation").version("1.0.1")
}

//*************************************************************************
// Versioning
//*************************************************************************

task(release) {
    doLast {
        if (getPropertyOrElse(project, 'newVersion', '') == '') {
            throw new IllegalArgumentException("Argument 'newVersion' is not specified. Please carry '-PnewVersion=x.x.x' as argument.")
        }
        def currentVersion = "${getVersion(project)}"
        def newVersion = generateVersion(project, getPropertyOrElse(project, 'newVersion', ''))
        println "Setting version from $currentVersion to $newVersion"

        ant.replaceregexp(match:currentVersion, replace:newVersion, flags:'g', byline:true, file:'README.md')
        ant.replaceregexp(match:currentVersion, replace:newVersion, flags:'g', byline:true, file:'docs/multi_spring_boot_versions.md')
        ant.replaceregexp(match:currentVersion, replace:newVersion, flags:'g', byline:true, file:'docs/extensible_integration.md')
        // fileset doesn't work as expected

        ant.propertyfile(file: "gradle.properties") {
            entry( key: "version", value: "$newVersion")
        }
    }
}

//*************************************************************************
// IDEA
//*************************************************************************

idea {
    module {
        inheritOutputDirs = true
        downloadSources = true
    }
    project.settings {
        compiler {
            javac {
                javacAdditionalOptions "-parameters"
            }
        }
    }
}

Properties localProp = new Properties()
try {
    localProp.load(project.rootProject.file('local.properties').newDataInputStream())
} catch(Exception ignored) {}
for (String propKey in localProp.keys()) {
    ext.set(propKey, localProp.get(propKey))
}
ext."signing.secretKeyRingFile" = rootProject.file('publish.gpg')

//*************************************************************************
// Sub Project Config
//*************************************************************************

subprojects {
    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'https://repo.spring.io/snapshot' }
        maven {
            name = 'Central Portal Snapshots'
            url = 'https://central.sonatype.com/repository/maven-snapshots/'
        }
        maven { url "https://jitpack.io" }
    }

    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
//    apply plugin: 'ch.raffael.markdown-doclet'
    if (isApplicationProject(name)) {
        apply plugin: 'application'
        apply plugin: 'org.springframework.boot'
    } else if (isLibraryProject(name)) {
        apply plugin: 'maven-publish'
        apply plugin: 'signing'
    }
    if (hasDataBaseProject(name)) {
        apply plugin: 'nu.studer.jooq'
        apply plugin: 'org.flywaydb.flyway'
    }

//*************************************************************************
// Properties
//*************************************************************************

    task setProperties {
        doFirst {
            project.ext.executable = "$project.name"
        }
    }

//*************************************************************************
// Compile & Assemble
//*************************************************************************

    if (VersionNumber.parse("${springBootVersion}") >= VersionNumber.parse("3.0")) {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    } else {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    compileJava {
        options.compilerArgs << '-parameters'
    }

    compileTestJava {
        options.compilerArgs << '-parameters'
    }

    tasks.withType(AbstractCompile) {
        options.encoding = 'UTF-8'
    }
    tasks.withType(Javadoc) {
        options.encoding = 'UTF-8'
        if(JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    jar {
        manifest.attributes provider: 'gradle'
        enabled true
        doFirst {
            archiveFileName = "$project.name-${getVersion(project)}.${archiveExtension.get()}"
        }
    }

    test {
        testLogging.showStandardStreams = true
        workingDir = project.rootDir
        testLogging {
            events "failed"
            exceptionFormat "short"
        }
    }

    configurations {
        localLibs
        compile.extendsFrom(localLibs)
    }

    dependencies {
        localLibs fileTree(dir: 'libs', include: '**')
        implementation "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.pf4j:pf4j:${pf4jVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.pf4j:pf4j:${pf4jVersion}"
    }

//*************************************************************************
// Build Tasks
//*************************************************************************

    task buildApp {
        group 'build'
        finalizedBy jar
    }

    task cleanBuildDir(type: Delete) {
        group 'build'
        delete "${projectDir}/out"
    }

//*************************************************************************
// Plugin
//*************************************************************************

    if (isPluginProject(project)) {

        Properties pluginProp = new Properties()
        pluginProp.load(file('plugin.properties').newDataInputStream())

        task buildPlugin(type: Jar) {
            group 'build'
            dependsOn build
            manifest.attributes(
                    "Plugin-Id": pluginProp.get("plugin.id"),
                    "Plugin-Class": pluginProp.get("plugin.class"),
                    "Plugin-Version": pluginProp.get("plugin.version"),
                    "Plugin-Provider": pluginProp.get("plugin.provider"),
                    "Plugin-Dependencies": pluginProp.get("plugin.dependencies"))
            from configurations.localLibs.asFileTree.files.collect { zipTree(it) } // flat all lib classes into a fat Jar
//            from configurations.localLibs.asFileTree.files
            with jar
            doLast {
                // Deploy built plugins...
            }
        }

        task deployPluginToLocal(type: Copy) {
            group 'build'
            dependsOn buildPlugin
            from "$buildDir/libs/"
            into "$rootDir/path/to/plugins/${plugin}/"
        }
    }

//*************************************************************************
// Spring Boot
//*************************************************************************

    dependencyManagement {
        imports {
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
        }
    }

    if (isApplicationProject(name)) {

        bootRun {
            doFirst {
                jvmArgs = ["-Dfile.encoding=UTF-8", "-Dserver.port=${http_port}"]
            }
        }

        if (project.hasProperty("db.url")) {

//*************************************************************************
// Database Initialization
//*************************************************************************

            task("doMigration") {
                dependsOn processResources
                doFirst {
                    println ">>>>>>>>>>> doing db_migration on ${project.'db.url'}"

                    flyway {
                        url = project.'db.url'
                        user = project.'db.user'
                        password = project.'db.password'
                        driver = project.'db.driver'
                        schemas = ["${project.'db.schema'}"]
                        baselineVersion = '0'
                        baselineOnMigrate = true
                        table = project.'db.migration.table'
                        locations = ["filesystem:$buildDir/resources/main/${project.'db.migration.location'}"]
                    }
                }
                finalizedBy flywayMigrate, flywayInfo
            }

            task("doDataMigration") {
                dependsOn processResources
                doFirst {
                    println ">>>>>>>>>>> do db_data migration on ${project.'db.url'}"

                    flyway {
                        url = project.'db.url'
                        user = project.'db.user'
                        password = project.'db.password'
                        driver = project.'db.driver'
                        schemas = ["${project.'db.schema'}"]
                        baselineOnMigrate = true
                        baselineVersion = '0'
                        table = project.'db.data.table'
                        locations = ["filesystem:$buildDir/resources/main/${project.'db.data.location'}"]
                    }

                }
                finalizedBy flywayMigrate, flywayInfo
            }

            jooq {
                version = "${jooqVersion}"
                configurations {
                    main {
                        generateSchemaSourceOnCompilation = true  // default (can be omitted)
                        generationTool {
                            logging = Logging.ERROR
                            jdbc {
                                url = project.'db.url'
                                user = project.'db.user'
                                password = project.'db.password'
                                driver = project.'db.driver'
                            }
                            generator {
                                name = 'org.jooq.codegen.DefaultGenerator'
                                database {
                                    name = 'org.jooq.meta.postgres.PostgresDatabase'
                                    inputSchema = project.'db.schema'
                                    includes = '.*'
                                    excludes = '_.*'
                                    forcedTypes {
                                        forcedType {
                                            userType = 'com.fasterxml.jackson.databind.JsonNode'
                                            binding = 'demo.sbp.shared.PostgresJsonbBinding'
                                            types = 'jsonb'
                                        }
                                    }
                                }
                                generate {
                                    deprecated = false
                                    records = true
                                    immutablePojos = true
                                    fluentSetters = true
                                }
                                target {
                                    packageName = project.'jooq.target.package'
                                }
                                strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                            }
                        }
                    }
                }
            }
        }

    } else if (isLibraryProject(name)) {

    //*************************************************************************
    // Maven
    //*************************************************************************

        javadoc {
            options.addStringOption('Xdoclint:none', '-quiet')
        }

        task sourcesJar(type: Jar, dependsOn: classes) {
            archiveClassifier.set('sources')
            from sourceSets.main.allSource
        }

        task javadocJar(type: Jar, dependsOn: javadoc) {
            archiveClassifier.set('javadoc')
            from javadoc.destinationDir
        }

        artifacts {
            archives jar
            archives sourcesJar
            archives javadocJar
        }

        group = 'org.laxture'

        publishing {
            publications {
                mavenJava(MavenPublication) {
                    groupId = project.getGroup()
                    version getVersion(project)
                    from components.java
                    artifact sourcesJar
                    artifact javadocJar
                    pom {
                        name = project.name
                        description = 'sbp introduce plugin oriented programming to Spring Boot'
                        url = 'https://github.com/hank-cp/sbp'
                        organization {
                            name = 'org.laxture'
                            url = 'https://laxture.org'
                        }
                        issueManagement {
                            system = 'GitHub'
                            url = 'https://github.com/hank-cp/sbp/issues'
                        }
                        license {
                            name = 'Apache License 3.0'
                            url = 'https://github.com/hank-cp/sbp/blob/master/LICENSE'
                            distribution = 'repo'
                        }
                        scm {
                            url = 'https://github.com/hank-cp/sbp'
                            connection = 'scm:git:git://github.com/hank-cp/sbp.git'
                            developerConnection = 'scm:git:ssh://git@github.com:hank-cp/sbp.git'
                        }
                        developers {
                            developer {
                                name = 'Hank CP'
                                email = 'true.cp@gmail.com'
                            }
                        }
                    }
                    repositories {
                        maven {
                            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
                            def stagingRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : stagingRepoUrl
                            credentials {
                                username getPropertyOrElse(project, 'sonatypeUsername', '')
                                password getPropertyOrElse(project, 'sonatypePassword', '')
                            }
                        }
                    }
                }
            }
        }

        signing {
            sign publishing.publications.mavenJava
        }
    }
}

nmcpAggregation {
    centralPortal {
        username = getPropertyOrElse(project, 'sonatypeUsername', '')
        password = getPropertyOrElse(project, 'sonatypePassword', '')
        // publish manually from the portal
        publishingType = "USER_MANAGED"
        // or if you want to publish automatically
//        publishingType = "AUTOMATIC"
    }

    // Publish all projects that apply the 'maven-publish' plugin
    publishAllProjectsProbablyBreakingProjectIsolation()
}